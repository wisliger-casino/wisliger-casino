openapi: "3.0.3"
info:
  title: "Wisliger Casino API"
  version: "0.0.1"
  description: "Casino of Wislig"
paths:
  /token:
    put:
      description: Refresh the current Session
      operationId: refresh
      tags:
        - Authorization
      security: []
      responses:
        200:
          description: Successfully refreshed the token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
      parameters:
        - name: Refresh-Token
          in: header
          schema:
            description: The Refresh Token received on login
            type: string
          required: true
    post:
      description: Log in with Discord
      operationId: login
      security: []
      tags:
        - Authorization
      requestBody:
        content:
          text/plain:
            schema:
              description: Code received by the Discord Login
              type: string
              example: NhhvTDYsFcdgNLnnLijcl7Ku7bEEeee
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        201:
          description: When a new User is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        401:
          description: Discord didn't accept the code
  /users/me:
      get:
        description: Get the user currently logged in
        tags:
          - User
          - Self
        responses:
          200:
            description: The logged in User
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Self"
          401:
            $ref: "#/components/responses/Unauthorized"
        operationId: getMyself
  /users/me/username:
      patch:
          description: Change your username
          tags:
            - Self
          operationId: changeUsername
          responses:
            200:
              description: Succesfully changed the username
            401:
              $ref: "#/components/responses/Unauthorized"
          requestBody:
            required: true
            description: the new username
            content:
              text/plain:
                schema:
                  type: string
  /users/{id}:
      get:
        description: Get user by user id
        security: []
        parameters:
          - name: id
            schema:
              type: string
              description: ID of the User
            in: path
            required: true
        tags:
          - User
        responses:
          200:
            description: The User searched for
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
  /leaderboard:
    get:
      description: Get the current Leaderboard
      operationId: leaderboard
      tags:
        - Social
      security: []
      responses:
        200:
          description: Leaderboard Ranked by Current credit - debt
          content:
            application/json:
              schema:
                properties:
                  users:
                    type: array
                    items:
                        $ref: "#/components/schemas/SmallUser"


components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: The User is unathorized
      content:
        text/plain:
          schema:
            type: string
            example: token-expired
            enum:
              - token-expired
              - token-invalid
              - no-token
  schemas:
    Token:
        description: Content with the Refresh Token, Auth Token and the time it expires as UTC timestamp
        properties:
          refreshToken:
            type: string
            description: Refresh token used to refresh the Auth token when the Auth token is expired.
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.PuN8pAe05CZcEO1VR1_P2QTQIZHv4rw2-PzQhRGetLM
          token:
            type: string
            description: Auth token allowing a user to access the website
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.PuN8pAe05CZcEO1VR1_P2QTQIZHv4rw2-PzQhRGetLM
          expires:
            type: number
            description: the UTC timestamp of the time the auth token expires.
            example: 1653920748353
    SmallUser:
        properties:
          username:
            type: string
          credit:
            type: integer
          debt:
            type: number
          description:
            type: string
    Self:
      properties:
        credit:
          type: integer
          default: 50
        debt:
          type: integer
        id:
          type: string
        language:
          type: string
          enum:
            - de
            - en
            - de-ch
            - uwu
        username:
          type: string
        description:
          type: string
        private:
          type: boolean
    User:
      properties:
        username:
          type: string







security:
  - bearerAuth: []
